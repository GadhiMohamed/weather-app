{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","icon","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","console","log","_this","setState","main","temp","sys","weather","message","stop","this","components_Titles","components_Form","components_Weather","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.42233727.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className='title-container__title'>Weather Finder</h1>\r\n        <p className='title-container__subtitle'>Find out temperature, conditions and more...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <div className='text-center'>\r\n        <form onSubmit={props.getWeather}>\r\n            <br />\r\n            <input type='text' name='city' placeholder='city' />\r\n            <input type='text' name='country' placeholder='country' />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    </div>\r\n);\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n\r\n    <div className='weather__info'>\r\n        {\r\n            props.city && props.city && <p className='weather__key'>Location:\r\n           <span className='weather__value'> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p className='weather__key'>Temperature:\r\n            <span className='weather__value'> {props.temperature}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p className='weather__key'>Humidity:\r\n            <span className='weather__value'> {props.humidity}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && <p className='weather__key'>Conditions:\r\n            <span className='weather__value'> {props.description}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p className='weather__error'>{props.error}</p>\r\n        }\r\n    </div>\r\n\r\n);\r\nexport default Weather;","import React from 'react';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\n\r\nconst API_KEY = \"bda4c33250a7cfad7eaccb68b60a95b2\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: undefined,\r\n    };\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();\r\n        if (city && country && data.cod !== \"404\") {\r\n            console.log(data);\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                error: \"\"\r\n            });\r\n        } else if (city && country && data.message === \"city not found\" && data.cod === \"404\") {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"City not found\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter values\"\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='wrapper'>\r\n                    <div className='main'>\r\n                        <div className='container-fluid'>\r\n                            <div className='row'>\r\n                                <div className='col-md-5 d-none d-md-flex title-container img-fluid'>\r\n                                    <Titles />\r\n                                </div>\r\n                                <div className='col-md-7 col-xs-12 form-container ' >\r\n                                    <Form getWeather={this.getWeather} />\r\n                                    <br />\r\n                                    <Weather\r\n                                        temperature={this.state.temperature}\r\n                                        city={this.state.city}\r\n                                        country={this.state.country}\r\n                                        humidity={this.state.humidity}\r\n                                        description={this.state.description}\r\n                                        error={this.state.error}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}